// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ai_engine/v1/ai_engine.proto

package ai_enginev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIEngineService_Plan_FullMethodName           = "/ai_engine.v1.AIEngineService/Plan"
	AIEngineService_PlanAndCodegen_FullMethodName = "/ai_engine.v1.AIEngineService/PlanAndCodegen"
)

// AIEngineServiceClient is the client API for AIEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIEngineServiceClient interface {
	Plan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error)
	PlanAndCodegen(ctx context.Context, in *PlanAndCodegenRequest, opts ...grpc.CallOption) (*PlanAndCodegenResponse, error)
}

type aIEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIEngineServiceClient(cc grpc.ClientConnInterface) AIEngineServiceClient {
	return &aIEngineServiceClient{cc}
}

func (c *aIEngineServiceClient) Plan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlanResponse)
	err := c.cc.Invoke(ctx, AIEngineService_Plan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIEngineServiceClient) PlanAndCodegen(ctx context.Context, in *PlanAndCodegenRequest, opts ...grpc.CallOption) (*PlanAndCodegenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlanAndCodegenResponse)
	err := c.cc.Invoke(ctx, AIEngineService_PlanAndCodegen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}


type AIEngineServiceServer interface {
	Plan(context.Context, *PlanRequest) (*PlanResponse, error)
	PlanAndCodegen(context.Context, *PlanAndCodegenRequest) (*PlanAndCodegenResponse, error)
	mustEmbedUnimplementedAIEngineServiceServer()
}

// UnimplementedAIEngineServiceServer must be embedded to have
// forward compatible implementations.

type UnimplementedAIEngineServiceServer struct{}

func (UnimplementedAIEngineServiceServer) Plan(context.Context, *PlanRequest) (*PlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Plan not implemented")
}
func (UnimplementedAIEngineServiceServer) PlanAndCodegen(context.Context, *PlanAndCodegenRequest) (*PlanAndCodegenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanAndCodegen not implemented")
}
func (UnimplementedAIEngineServiceServer) mustEmbedUnimplementedAIEngineServiceServer() {}
func (UnimplementedAIEngineServiceServer) testEmbeddedByValue()                         {}

// UnsafeAIEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIEngineServiceServer will
// result in compilation errors.
type UnsafeAIEngineServiceServer interface {
	mustEmbedUnimplementedAIEngineServiceServer()
}

func RegisterAIEngineServiceServer(s grpc.ServiceRegistrar, srv AIEngineServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIEngineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIEngineService_ServiceDesc, srv)
}

func _AIEngineService_Plan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServiceServer).Plan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngineService_Plan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServiceServer).Plan(ctx, req.(*PlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIEngineService_PlanAndCodegen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanAndCodegenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServiceServer).PlanAndCodegen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngineService_PlanAndCodegen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServiceServer).PlanAndCodegen(ctx, req.(*PlanAndCodegenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIEngineService_ServiceDesc is the grpc.ServiceDesc for AIEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_engine.v1.AIEngineService",
	HandlerType: (*AIEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Plan",
			Handler:    _AIEngineService_Plan_Handler,
		},
		{
			MethodName: "PlanAndCodegen",
			Handler:    _AIEngineService_PlanAndCodegen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_engine/v1/ai_engine.proto",
}
