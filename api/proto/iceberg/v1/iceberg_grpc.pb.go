// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: iceberg/v1/iceberg.proto

package icebergv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IcebergService_CreateTable_FullMethodName   = "/iceberg.v1.IcebergService/CreateTable"
	IcebergService_AppendToTable_FullMethodName = "/iceberg.v1.IcebergService/AppendToTable"
	IcebergService_OptimizeTable_FullMethodName = "/iceberg.v1.IcebergService/OptimizeTable"
)

// IcebergServiceClient is the client API for IcebergService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IcebergServiceClient interface {
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	AppendToTable(ctx context.Context, in *AppendToTableRequest, opts ...grpc.CallOption) (*AppendToTableResponse, error)
	OptimizeTable(ctx context.Context, in *OptimizeTableRequest, opts ...grpc.CallOption) (*OptimizeTableResponse, error)
}

type icebergServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIcebergServiceClient(cc grpc.ClientConnInterface) IcebergServiceClient {
	return &icebergServiceClient{cc}
}

func (c *icebergServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, IcebergService_CreateTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icebergServiceClient) AppendToTable(ctx context.Context, in *AppendToTableRequest, opts ...grpc.CallOption) (*AppendToTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendToTableResponse)
	err := c.cc.Invoke(ctx, IcebergService_AppendToTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icebergServiceClient) OptimizeTable(ctx context.Context, in *OptimizeTableRequest, opts ...grpc.CallOption) (*OptimizeTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizeTableResponse)
	err := c.cc.Invoke(ctx, IcebergService_OptimizeTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IcebergServiceServer is the server API for IcebergService service.
// All implementations must embed UnimplementedIcebergServiceServer
// for forward compatibility.
type IcebergServiceServer interface {
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	AppendToTable(context.Context, *AppendToTableRequest) (*AppendToTableResponse, error)
	OptimizeTable(context.Context, *OptimizeTableRequest) (*OptimizeTableResponse, error)
	mustEmbedUnimplementedIcebergServiceServer()
}

// UnimplementedIcebergServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIcebergServiceServer struct{}

func (UnimplementedIcebergServiceServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedIcebergServiceServer) AppendToTable(context.Context, *AppendToTableRequest) (*AppendToTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendToTable not implemented")
}
func (UnimplementedIcebergServiceServer) OptimizeTable(context.Context, *OptimizeTableRequest) (*OptimizeTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeTable not implemented")
}
func (UnimplementedIcebergServiceServer) mustEmbedUnimplementedIcebergServiceServer() {}
func (UnimplementedIcebergServiceServer) testEmbeddedByValue()                        {}

// UnsafeIcebergServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IcebergServiceServer will
// result in compilation errors.
type UnsafeIcebergServiceServer interface {
	mustEmbedUnimplementedIcebergServiceServer()
}

func RegisterIcebergServiceServer(s grpc.ServiceRegistrar, srv IcebergServiceServer) {
	// If the following call pancis, it indicates UnimplementedIcebergServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IcebergService_ServiceDesc, srv)
}

func _IcebergService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcebergServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcebergService_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcebergServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcebergService_AppendToTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendToTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcebergServiceServer).AppendToTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcebergService_AppendToTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcebergServiceServer).AppendToTable(ctx, req.(*AppendToTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IcebergService_OptimizeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IcebergServiceServer).OptimizeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IcebergService_OptimizeTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IcebergServiceServer).OptimizeTable(ctx, req.(*OptimizeTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IcebergService_ServiceDesc is the grpc.ServiceDesc for IcebergService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IcebergService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iceberg.v1.IcebergService",
	HandlerType: (*IcebergServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _IcebergService_CreateTable_Handler,
		},
		{
			MethodName: "AppendToTable",
			Handler:    _IcebergService_AppendToTable_Handler,
		},
		{
			MethodName: "OptimizeTable",
			Handler:    _IcebergService_OptimizeTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iceberg/v1/iceberg.proto",
}
